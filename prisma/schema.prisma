// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Using these for virtuous account details.  Was used by Next Auth for OAuth Clients.  However, credentials method on Next Auth is not supported
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Team {
  id                     String                  @id @default(cuid())
  name                   String?
  users                  User[]
  virtuousOrg            String?
  virtuousOrgName        String?
  virtuousOrgTimeZone    String?
  APISettings            ApiSetting?
  RESettings             FeSetting?
  stripeCustomerId       String?                 @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?                 @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?                 @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime?               @map(name: "stripe_current_period_end")
  giftBatches            GiftBatch[]
  gifts                  Gift[]
  virtuousProjects       VirtuousProject[]
  feProjects             FeProject[]
  projectMappings        ProjectMapping[]
  reAccounts             FeAccount[]
  reJournals             FeJournal[]
  feAccountCodes         FeAccountCode[]
  defaultJournal         String?
  defaultCreditAccount   String?
  defaultDebitAccount    String?
  setupStep              String?
  ProjectAccountMapping  ProjectAccountMapping[]
  automation             Boolean?                @default(false)
  frequency              String?                 @default("daily")
  syncHistory            SyncHistory[]
  AnedotEvent            AnedotEvent[]
  AnedotWebhook          AnedotWebhook[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now()) @map(name: "created_at")
  updatedAt     DateTime      @default(now()) @map(name: "updated_at")
  accounts      Account[]
  sessions      Session[]
  Post          Post[]
  teamId        String?
  team          Team?         @relation(fields: [teamId], references: [id])
  role          String?       @default("user")
  syncHistory   SyncHistory[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   Json?
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  authorId  String

  author User @relation(fields: [authorId], references: [id])

  @@map(name: "posts")
}

model ApiSetting {
  id          String   @id @default(cuid())
  virtuousAPI String   @db.MediumText
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @map(name: "updated_at")
  teamId      String   @unique
  team        Team     @relation(fields: [teamId], references: [id])

  @@map(name: "api_settings")
}

model FeSetting {
  id                       String   @id @default(cuid())
  token_type               String
  expires_in               Int
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  environment_id           String
  environment_name         String
  legal_entity_id          String
  legal_entity_name        String
  user_id                  String
  email                    String
  family_name              String
  given_name               String
  refresh_token_expires_in Int
  mode                     String?
  scope                    String?
  createdAt                DateTime @default(now()) @map(name: "created_at")
  updatedAt                DateTime @default(now()) @map(name: "updated_at")
  teamId                   String   @unique
  team                     Team     @relation(fields: [teamId], references: [id])

  @@map(name: "fe_settings")
}

model GiftBatch {
  id          String        @id @default(cuid())
  batch_name  String        @unique
  synced      Boolean       @default(false)
  reBatchNo   Int?
  syncedAt    DateTime?     @map(name: "synced_at")
  createdAt   DateTime      @default(now()) @map(name: "created_at")
  updatedAt   DateTime      @default(now()) @map(name: "updated_at")
  teamId      String
  team        Team          @relation(fields: [teamId], references: [id])
  syncHistory SyncHistory[]

  @@unique([teamId, batch_name])
  @@map(name: "gift_batches")
}

model Gift {
  gift_id                 String    @id @default(cuid())
  id                      Int
  transactionSource       String?
  transactionId           String?
  contactId               Int?
  contactName             String?
  contactUrl              String?
  giftType                String?
  giftTypeFormatted       String?
  giftDate                DateTime?
  giftDateFormatted       String?
  amount                  Decimal?
  amountFormatted         String?
  currencyCode            String?
  exchangeRate            Decimal?
  baseCurrencyCode        String?
  batch                   String?
  createDateTimeUtc       DateTime?
  createdByUser           String?
  modifiedDateTimeUtc     DateTime?
  modifiedByUser          String?
  segmentId               Int?
  segment                 String?
  segmentCode             String?
  segmentUrl              String?
  mediaOutletId           Int?
  mediaOutlet             String?
  grantId                 Int?
  grant                   String?
  grantUrl                String?
  notes                   String?
  tribute                 String?
  tributeId               Int?
  tributeType             String?
  acknowledgeIndividualId Int?
  receiptDate             DateTime?
  receiptDateFormatted    String?
  contactPassthroughId    Int?
  contactPassthroughUrl   String?
  contactIndividualId     Int?
  cashAccountingCode      String?
  giftAskId               Int?
  contactMembershipId     Int?
  giftUrl                 String?
  isTaxDeductible         Boolean?
  giftDesignations        Json
  giftPremiums            Json?
  recurringGiftPayments   Json?
  pledgePayments          Json?
  customFields            Json?
  batch_name              String
  synced                  Boolean?
  createdAt               DateTime  @default(now()) @map(name: "created_at")
  updatedAt               DateTime  @default(now()) @map(name: "updated_at")
  teamId                  String
  team                    Team      @relation(fields: [teamId], references: [id])

  @@unique([teamId, id])
  @@map(name: "gifts")
}

model VirtuousProject {
  project_id             String                  @id @default(cuid())
  id                     Int
  name                   String?                 @db.VarChar(254)
  projectCode            String?
  externalAccountingCode String?
  onlineDisplayName      String?
  description            String?                 @db.VarChar(254)
  type                   String?
  isPublic               Boolean?
  isActive               Boolean?
  isTaxDeductible        Boolean?
  giftSpecifications     Json?
  customFields           Json?
  createdDateTimeUTC     DateTime?
  modifiedDateTimeUTC    DateTime?
  createdAt              DateTime                @default(now()) @map(name: "created_at")
  updatedAt              DateTime                @default(now()) @map(name: "updated_at")
  projectMappings        ProjectMapping[]
  teamId                 String
  team                   Team                    @relation(fields: [teamId], references: [id])
  ProjectAccountMapping  ProjectAccountMapping[]

  @@unique([teamId, id])
  @@map(name: "virtuous_projects")
}

model FeProject {
  id                    String           @id @default(cuid())
  project_id            Int
  ui_project_id         String
  projectCode           String?
  location              String?
  division              String?
  department            String?
  type                  String?
  status                String?
  description           String?
  added_by              String?
  modified_by           String?
  prevent_data_entry    Boolean?
  prevent_posting_after Boolean?
  account_restrictions  Json?
  customFields          Json?
  date_added            DateTime?
  date_modified         DateTime?
  start_date            DateTime?
  end_date              DateTime?
  posting_date          DateTime?
  createdAt             DateTime         @default(now()) @map(name: "created_at")
  updatedAt             DateTime         @default(now()) @map(name: "updated_at")
  projectMappings       ProjectMapping[]
  teamId                String
  team                  Team             @relation(fields: [teamId], references: [id])

  @@unique([teamId, project_id])
  @@map(name: "fe_projects")
}

model ProjectMapping {
  id           String          @id @default(cuid())
  virProject   VirtuousProject @relation(fields: [virProjectId], references: [project_id])
  virProjectId String
  feProject    FeProject       @relation(fields: [feProjectId], references: [id])
  feProjectId  String
  teamId       String
  team         Team            @relation(fields: [teamId], references: [id])

  @@index([virProjectId, teamId])
  @@map(name: "project_mappings")
}

model ProjectAccountMapping {
  id           String          @id @default(cuid())
  virProject   VirtuousProject @relation(fields: [virProjectId], references: [project_id])
  virProjectId String
  feAccount    FeAccount       @relation(fields: [feAccountId, teamId], references: [account_id, teamId])
  feAccountId  Int
  teamId       String
  team         Team            @relation(fields: [teamId], references: [id])

  @@unique([virProjectId, teamId])
  @@map(name: "project_account_mappings")
}

model FeAccount {
  account_id                Int
  account_number            String
  description               String?
  prevent_data_entry        Boolean?
  prevent_posting_data      Boolean?
  class                     String?
  cashflow                  String?
  working_capital           String?
  custom_fields             Json?
  default_transaction_codes Json?
  date_added                DateTime?
  added_by                  String?
  date_modified             DateTime?
  modified_by               String?
  createdAt                 DateTime                @default(now()) @map(name: "created_at")
  updatedAt                 DateTime                @default(now()) @map(name: "updated_at")
  teamId                    String
  team                      Team                    @relation(fields: [teamId], references: [id])
  ProjectAccountMapping     ProjectAccountMapping[]

  @@id([account_id, teamId])
  @@unique([account_id, teamId])
  @@map(name: "fe_accounts")
}

model FeAccountCode {
  account_code_id Int     @id
  value           Int
  category        String
  class           String?
  is_contra       Boolean
  is_control      Boolean
  description     String
  teamId          String
  team            Team    @relation(fields: [teamId], references: [id])

  @@unique([teamId, account_code_id])
  @@map(name: "fe_account_codes")
}

model FeJournal {
  id      Int
  code    String
  journal String
  teamId  String
  team    Team   @relation(fields: [teamId], references: [id])

  @@unique([teamId, id])
  @@map(name: "fe_journals")
}

model SyncHistory {
  id           String     @id @default(cuid())
  teamId       String
  team         Team       @relation(fields: [teamId], references: [id])
  userId       String?
  User         User?      @relation(fields: [userId], references: [id])
  syncDate     DateTime
  syncType     String
  syncStatus   String
  syncMessage  String?
  syncDuration Int
  giftBatch    GiftBatch? @relation(fields: [giftBatchId], references: [id])
  giftBatchId  String?

  @@map(name: "sync_history")
}

model AnedotEvent {
  id                 String   @id @default(cuid())
  webhookId          String?
  integrationId      String?
  signature          String?
  event              String?
  payload            Json?
  src                String?
  env                String?
  recurringGiftId    String?
  recurringGiftMatch Boolean? @default(false)
  updateRecurring    Boolean? @default(false)
  synced             Boolean? @default(false)
  status             String?
  projectMatch       Boolean?
  contactMatch       Boolean?
  segmentMatch       Boolean?
  addressMatch       Boolean?
  matchQuality       Int?
  virtuousContact    Int?
  virtuousProject    Int?
  virtuousSegment    Int?
  attention          Boolean?
  attentionReason    String?  @db.MediumText
  virtuousQuery      String?  @db.LongText
  syncErrorResponse  Json?
  syncSrc            String?
  createdAt          DateTime @default(now()) @map(name: "created_at")
  updatedAt          DateTime @default(now()) @map(name: "updated_at")
  teamId             String?
  team               Team?    @relation(fields: [teamId], references: [id])
}

model AnedotDonation {
  id                      String   @id @default(cuid())
  campaign_uid            String
  uid                     String
  name                    String
  amount_in_dollars       Float
  event_amount            String
  source                  String
  source_code             String?
  origin                  String
  date                    DateTime
  processed_date          DateTime
  status                  String
  donor_type              String
  organization_name       String
  is_recurring_commitment Boolean
  recurring               Boolean
  frequency               String
  email                   String
  title                   String?
  first_name              String
  middle_initial          String?
  last_name               String
  suffix                  String?
  street                  String
  street_2                String?
  city                    String
  state                   String
  zip                     String
  country                 String
  phone                   String
  employer                String?
  occupation              String?
  comments                String?
  check_number            String?
  custom_fields           Json?
  items                   Json?
  originating_uid         String?
  address                 Json?

  @@map(name: "anedot_donations")
}

model AnedotWebhook {
  id             String   @id @default(cuid())
  account_name   String
  account_uid    String
  webhook_secret String
  active         Boolean? @default(false)
  teamId         String
  team           Team     @relation(fields: [teamId], references: [id])
}
